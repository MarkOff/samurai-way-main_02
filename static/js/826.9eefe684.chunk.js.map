{"version":3,"file":"static/js/826.9eefe684.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileBlock/ProfileBlock.module.css?161b","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileBlock/ProfileStatus/ProfileStatusWithHooks.module.css?40e7","components/Profile/ProfileInfo/ProfileBlock/ProfileStatus/ProfileStatusWithHooks.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileBlock/Contacts/Contacts.module.css?3196","components/Profile/ProfileInfo/ProfileBlock/Contacts/Contacts.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileBlock/StatusJob/StatusJob.module.css?9191","components/Profile/ProfileInfo/ProfileBlock/StatusJob/StatusJob.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileBlock/AboutMe/AboutMe.module.css?00af","components/Profile/ProfileInfo/ProfileBlock/AboutMe/AboutMe.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileBlock/FullName/FullName.module.css?057e","components/Profile/ProfileInfo/ProfileBlock/FullName/FullName.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileBlock/MainAvatar/MainAvatar.module.css?153e","components/Profile/ProfileInfo/ProfileBlock/MainAvatar/MainAvatar.tsx","components/Profile/ProfileInfo/ProfileBlock/ProfileBlock.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileBlock/ProfileDataForm.module.css?8adc","components/Profile/ProfileInfo/ProfileBlock/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/PostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","redux/selectors/profile.selectors.ts","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileContainer\":\"ProfileBlock_profileContainer__YhXOP\",\"blockNameAndStatus\":\"ProfileBlock_blockNameAndStatus__eM2jQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"ProfileStatusWithHooks_status__lumN0\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport s from './ProfileStatusWithHooks.module.css'\r\n\r\n\r\ntype Props = {\r\n    status: string | undefined\r\n    updateStatus: ((status: string) => void) | undefined\r\n}\r\n\r\nexport const ProfileStatusWithHooks: FC<Props> = ({status, updateStatus}) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [newStatus, setNewStatus] = useState(status)\r\n\r\n    useEffect(() => {\r\n        setNewStatus(status)\r\n    },[status])\r\n\r\n\r\n    const onActiveEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onDeactivateEditeMode = () => {\r\n        setEditMode(false)\r\n        if (updateStatus) {\r\n            updateStatus(newStatus!)\r\n        }\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const onHasStatus = !status && 'No status' || status && <><b>Status:</b> {status}</>\r\n\r\n    return (\r\n        <div className={s.status}>\r\n            {!editMode &&\r\n                <div title={'On double click change status'}>\r\n                    <span onDoubleClick={onActiveEditMode}> {onHasStatus} </span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={onDeactivateEditeMode} className={s.statusInput}\r\n                           value={newStatus} placeholder={'change you status'} minLength={0} maxLength={30}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"Contacts_contacts__+FfTV\"};","import React, {FC} from 'react';\r\nimport s from 'components/Profile/ProfileInfo/ProfileBlock/Contacts/Contacts.module.css';\r\n\r\ntype ContactKeys = 'facebook' | 'website' | 'vk' | 'twitter' | 'instagram' | 'youtube' | 'github' | 'mainLink'\r\n\r\ntype ContactsType = {\r\n    contacts: {\r\n        facebook: null | string,\r\n        website: null | string,\r\n        vk: null | string,\r\n        twitter: null | string,\r\n        instagram: null | string,\r\n        youtube: null | string,\r\n        github: null | string,\r\n        mainLink: null | string\r\n    },\r\n}\r\n\r\nexport const Contacts: FC<ContactsType> = ({contacts}) => {\r\n\r\n    const hasContacts = Object.values(contacts).some(contact => contact !== null && contact !== '')\r\n\r\n    return (\r\n        <>\r\n            {hasContacts && <div className={s.contacts}>\r\n                <b>Contacts:</b> {Object.keys(contacts)\r\n                .filter((key) => {\r\n                    const contactKey = key as unknown as ContactKeys\r\n                    return contacts[contactKey] !== undefined && contacts[contactKey] !== null &&  contacts[contactKey] !== ''\r\n                })\r\n                .map(key => {\r\n                    const contactKey = key as unknown as ContactKeys\r\n                    return <Contact key={key} contactKey={key} contactValue={contacts[contactKey]!}/>\r\n                })}\r\n\r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\ntype ContactType = {\r\n    contactValue: string\r\n    contactKey: string\r\n\r\n}\r\n\r\nconst Contact: FC<ContactType> = ({contactValue, contactKey}) => {\r\n    return (\r\n        <a href={contactValue}>{contactKey}</a>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"statusJob\":\"StatusJob_statusJob__yVhUm\"};","import React, {FC} from 'react';\r\nimport s from './StatusJob.module.css';\r\nimport {UsersProfilePropsType} from 'components/Profile/ProfileContainer';\r\nimport {UserProfileType} from 'redux/redux-store';\r\n\r\ntype Props = Partial<Pick<UserProfileType, 'lookingForAJobDescription' | 'lookingForAJob'>>;\r\n\r\nexport const StatusJob: FC<Props> = ({lookingForAJob, lookingForAJobDescription}) => {\r\n\r\n    const hasStatusJob = lookingForAJobDescription !== null ?\r\n        <><b>Status Job: </b>{lookingForAJobDescription}</> : null\r\n    const onLookingForAJob = lookingForAJob ? 'yes' : 'no'\r\n    const onStatusForAJob = lookingForAJob && <div className={s.statusJob}>{hasStatusJob}</div>\r\n    return (\r\n        <>\r\n            <div className={s.statusJob}><b>Looking for a job: </b> {onLookingForAJob}</div>\r\n            {onStatusForAJob}\r\n        </>\r\n    );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"aboutMe\":\"AboutMe_aboutMe__LqVKo\"};","import React, {FC} from 'react';\r\nimport s from './AboutMe.module.css';\r\nimport {UsersProfilePropsType} from 'components/Profile/ProfileContainer';\r\nimport {UserProfileType} from 'redux/redux-store';\r\n\r\ntype Props = Partial<Pick<UserProfileType, 'aboutMe'>>;\r\n\r\nexport const AboutMe: FC<Props> = ({aboutMe}) => {\r\n    const hasAboutMe = aboutMe !== null ? <><b>About me: </b>{aboutMe}</> : null\r\n    return (\r\n        <div className={s.aboutMe}>{hasAboutMe}</div>\r\n    );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"FullName\":\"FullName_FullName__gQNSE\"};","import React, {FC} from 'react';\r\nimport {UserProfileType} from 'redux/redux-store';\r\nimport s from './FullName.module.css'\r\n\r\ntype Props = Partial<Pick<UserProfileType, 'fullName'>>;\r\n\r\nexport const FullName: FC<Props> = ({fullName}) => {\r\n    return (\r\n        <div className={s.FullName}>\r\n            {fullName}\r\n        </div>\r\n    );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"MainAvatar_avatar__rY5vl\",\"inputPhoto\":\"MainAvatar_inputPhoto__aGAv4\",\"labelPhoto\":\"MainAvatar_labelPhoto__-46BW\"};","import React, {ChangeEvent, FC} from 'react';\r\nimport s from './MainAvatar.module.css';\r\nimport defaultAva from 'avatars/765-default-avatar.png';\r\nimport {UsersProfilePropsType} from 'components/Profile/ProfileContainer';\r\n\r\ntype Props = Partial<Pick<UsersProfilePropsType, 'profile' | 'isOwner' | 'savePhoto'>>;\r\n\r\nexport const MainAvatar: FC<Props> = ({profile,isOwner, savePhoto}) => {\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            if (savePhoto) {\r\n                savePhoto(e.target.files[0])\r\n            }\r\n        }\r\n    }\r\n\r\n    const hasAvatar = profile?.photos.large !== null ? profile?.photos.large : defaultAva\r\n    const onChangeAvatar = isOwner && <input type=\"file\" onChange={onMainPhotoSelected} className={s.inputPhoto}/>\r\n\r\n    return (\r\n        <label className={isOwner ? s.labelPhoto : ''}>\r\n            <img className={s.avatar} alt={'Main avatar'} aria-label=\"updload photo\"\r\n                 src={hasAvatar}/>\r\n            {onChangeAvatar}\r\n        </label>\r\n    );\r\n};\r\n\r\n","import React, {FC} from 'react';\r\nimport s from './ProfileBlock.module.css';\r\nimport {ProfileStatusWithHooks} from 'components/Profile/ProfileInfo/ProfileBlock/ProfileStatus/ProfileStatusWithHooks';\r\nimport {Contacts} from 'components/Profile/ProfileInfo/ProfileBlock/Contacts/Contacts';\r\nimport {Preloader} from 'components/common/Preloader/Preloader';\r\nimport {StatusJob} from 'components/Profile/ProfileInfo/ProfileBlock/StatusJob/StatusJob';\r\nimport {AboutMe} from 'components/Profile/ProfileInfo/ProfileBlock/AboutMe/AboutMe';\r\nimport {FullName} from 'components/Profile/ProfileInfo/ProfileBlock/FullName/FullName';\r\nimport {MainAvatar} from 'components/Profile/ProfileInfo/ProfileBlock/MainAvatar/MainAvatar';\r\nimport {UserProfileType} from 'redux/redux-store';\r\n\r\n// type Props = Partial<Pick<UsersProfilePropsType,   'isOwner' | 'profile' | 'status' | 'updateStatus' | 'savePhoto'>>;\r\n\r\ntype ProfileBlockType = {\r\n    profile: UserProfileType | null\r\n    status: string\r\n    isOwner: boolean\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    goToEditMode: () => void\r\n}\r\n\r\n\r\nexport const ProfileBlock: FC<ProfileBlockType> = ({profile, isOwner, status, updateStatus, savePhoto, goToEditMode}) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <>\r\n\r\n            {/*<div className={s.wallImg}>*/}\r\n            {/*    <img src=\"https://i.pinimg.com/originals/b0/47/48/b047482b30fe60adac38bbfe05fbe7f2.jpg\"/>*/}\r\n            {/*</div>*/}\r\n\r\n            <div className={s.profileContainer}>\r\n                <MainAvatar profile={profile} isOwner={isOwner} savePhoto={savePhoto} />\r\n                <div className={s.blockNameAndStatus}>\r\n                    <FullName fullName={profile.fullName}/>\r\n                    <ProfileStatusWithHooks updateStatus={updateStatus} status={status}/>\r\n                </div>\r\n\r\n                <Contacts contacts={profile.contacts}/>\r\n            </div>\r\n                <div>{isOwner && <button onClick={goToEditMode}>edit</button> }  </div>\r\n            <AboutMe aboutMe={profile.aboutMe}/>\r\n            <StatusJob lookingForAJob={profile.lookingForAJob}\r\n                       lookingForAJobDescription={profile.lookingForAJobDescription}/>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"ProfileDataForm_formControl__crypd\",\"error\":\"ProfileDataForm_error__9mdar\",\"formSummeryError\":\"ProfileDataForm_formSummeryError__5IcDn\",\"input\":\"ProfileDataForm_input__XcEfJ\"};","import React, {FC} from 'react';\r\nimport {UserProfileType} from 'redux/redux-store';\r\nimport {createField, Input, Textarea} from 'components/common/FormsControl/FormsControl';\r\nimport {required} from 'utils/validators/validators';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport s from './ProfileDataForm.module.css'\r\n\r\n// type Props = Partial<Pick<UsersProfilePropsType,   'isOwner' | 'profile' | 'status' | 'updateStatus' | 'savePhoto'>>;\r\n\r\ntype PropsType = {\r\n    profile: UserProfileType\r\n}\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<UserProfileType, PropsType> & PropsType> = ({\r\n                                                                                            handleSubmit,\r\n                                                                                            profile,\r\n                                                                                            error\r\n                                                                                        }) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>save</button>\r\n                {error && <div className={s.formSummeryError}>{error}</div>}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Full Name: </b> {createField(Input, 'text', 'fullName', 'Enter you name', [required], null)}\r\n            </div>\r\n\r\n\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts)\r\n                .map(key => {\r\n                    return (\r\n                        <div key={key}>\r\n                            <b>{key}: {createField(Textarea, 'text', 'contacts.' + key, null, null, null)}</b>\r\n                        </div>\r\n                    )\r\n                })}\r\n\r\n            </div>\r\n\r\n            <div><b>About me: </b> {createField(Textarea, 'text', 'aboutMe', 'Write about yourself', null, null)}</div>\r\n            <div><b>Looking for a job: </b> {createField(Input, 'checkbox', 'lookingForAJob', null, null, null)}</div>\r\n            <div><b>My professional\r\n                skills: </b> {createField(Textarea, 'text', 'lookingForAJobDescription', 'Enter you skills', null, null)}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<UserProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm\r\n","import React, {FC, useState} from 'react';\r\nimport {UsersProfilePropsType} from '../ProfileContainer';\r\nimport {ProfileBlock} from 'components/Profile/ProfileInfo/ProfileBlock/ProfileBlock';\r\nimport ProfileDataFormReduxForm from 'components/Profile/ProfileInfo/ProfileBlock/ProfileDataForm';\r\nimport {FormSubmitHandler} from 'redux-form';\r\nimport {Preloader} from 'components/common/Preloader/Preloader';\r\nimport {UserProfileType} from 'redux/redux-store';\r\nimport {UpdateUserProfileType} from 'api/api';\r\n\r\n\r\ntype Props = {\r\n    profile: UserProfileType | null\r\n    status: string\r\n    isOwner: boolean\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: UpdateUserProfileType) => Promise<any>\r\n}\r\n\r\nexport const ProfileInfo: FC<Props> = ({profile, saveProfile, savePhoto, updateStatus, status, isOwner}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const onSubmit = (formData: UserProfileType) => {\r\n        saveProfile(formData).then((res: any) => {\r\n                if (res) {\r\n                    setEditMode(false)\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            {editMode\r\n                ? <ProfileDataFormReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                : <ProfileBlock profile={profile} isOwner={isOwner} status={status}\r\n                                updateStatus={updateStatus} savePhoto={savePhoto}\r\n                                goToEditMode={() => {\r\n                                    setEditMode(true)\r\n                                }}\r\n                />\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__tQRVL\",\"posts\":\"MyPosts_posts__IcSjH\"};","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"Post_posts__OmU92\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\nimport {PostsProps} from 'redux/redux-store';\r\n\r\n\r\n\r\nexport const Post = (props: PostsProps) => {\r\n    return (\r\n        <div className={s.posts}>\r\n            <img src=\"https://i.pinimg.com/736x/1e/33/a5/1e33a5fad800ee8e782ad87e63169187.jpg\"/>\r\n            {props.message}\r\n            <div>\r\n                <span> like {props.counterLike}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {FormEvent} from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from 'utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControl/FormsControl';\r\n\r\nexport type PostFormType = {\r\n    newPostTextBody: string\r\n}\r\n\r\nconst maxSymbols = maxLengthCreator(41)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<PostFormType>> = React.memo((props) => {\r\n\r\n\r\n\r\n    const submit = (e: FormEvent<HTMLFormElement>) => {\r\n        props.handleSubmit(e)\r\n        props.reset()\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={submit}>\r\n            <div>\r\n                <Field\r\n                    name=\"newPostTextBody\"\r\n                    component={Textarea}\r\n                    minLength={0}\r\n                    maxLength={40}\r\n                    placeholder=\"Enter you text\"\r\n                    validate={[required, maxSymbols]\r\n                    }/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n})\r\nexport const PostReduxForm = reduxForm<PostFormType>({\r\n    form: 'addPostForm',\r\n    initialValues: {newPostTextBody: ''}\r\n\r\n\r\n})(AddNewPostForm)","import React, {FC} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from './Post/Post';\r\nimport {MyPostsType} from './MyPostsContainer';\r\nimport {PostFormType, PostReduxForm} from '../PostForm/AddNewPostForm';\r\n\r\n\r\nexport const MyPosts: FC<MyPostsType> = React.memo( ({profilePost, addPost}) => {\r\n\r\n\r\n    const postsElement = profilePost.map((e) => {\r\n        return (\r\n            <Post key={e.id} id={e.id} message={e.message} counterLike={e.counterLike}/>\r\n        )\r\n    })\r\n\r\n\r\n    const createPost = (values: PostFormType) => {\r\n        addPost(values.newPostTextBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>My posts</h3>\r\n            <PostReduxForm onSubmit={createPost}/>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n} )\r\n","import {AppStateType} from '../redux-store';\r\n\r\nexport const selectPost = (state: AppStateType) => state.profilePage.posts\r\nexport const selectProfile = (state: AppStateType) => state.profilePage.profile\r\nexport const selectStatus = (state: AppStateType) => state.profilePage.status\r\nexport const selectOwner = (state: AppStateType) => state.profilePage.isOwner\r\n","import React from 'react';\r\nimport {AppStateType, PostsProps, ProfilePageType, RootActionsType, UserProfileType} from 'redux/redux-store';\r\nimport {addPostAC} from 'redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {selectPost, selectProfile, selectStatus} from 'redux/selectors/profile.selectors';\r\n\r\nexport type MyPostsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profilePost: PostsProps[]\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (postFormBody: string) => void\r\n}\r\n\r\n// ---------------------------------------------------------------------------------------\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePost: selectPost(state)\r\n    }\r\n}\r\nlet mapDispatchToProps: MapDispatchToPropsType = {\r\n    addPost: addPostAC,\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React, {FC} from 'react';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {UsersProfilePropsType} from './ProfileContainer';\r\nimport {type} from '@testing-library/user-event/dist/type';\r\nimport {UserProfileType} from 'redux/redux-store';\r\nimport {UpdateUserProfileType} from 'api/api';\r\nimport {setProfile} from 'redux/profile-reducer';\r\n\r\ntype Props = {\r\n    profile: UserProfileType | null\r\n    status: string\r\n    isOwner: boolean\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: UpdateUserProfileType) => Promise<any>\r\n}\r\n\r\n\r\nexport const Profile: FC<Props> = ({profile, saveProfile, savePhoto, updateStatus, status, isOwner}) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} updateStatus={updateStatus} status={status} saveProfile={saveProfile}\r\n                         isOwner={isOwner} savePhoto={savePhoto}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {AppStateType, UserProfileType} from 'redux/redux-store';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {getUserStatus, savePhoto, saveProfile, setProfile, setUserStatus, updateStatus} from 'redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {selectOwner, selectProfile, selectStatus} from 'redux/selectors/profile.selectors';\r\nimport {selectIsAuth, selectUserId} from 'redux/selectors/auth.selectors';\r\nimport {UpdateUserProfileType} from 'api/api';\r\n\r\n\r\nexport type UsersProfilePropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n// type MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapStatePropsType = {\r\n    profile: UserProfileType | null\r\n    status: string\r\n    autorizedUserId: string | null\r\n    isAuth: boolean\r\n    isOwner: boolean\r\n\r\n}\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    setProfile: (userId: string) => void\r\n    setUserStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: UpdateUserProfileType) => Promise<any>  //(dispatch: ThunkDispatch<AppStateType, void, AnyAction>, getState: () => AppStateType) => Promise<AxiosResponse<any>>\r\n}\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamType> & UsersProfilePropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component <PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId && this.props.autorizedUserId) {\r\n            userId = this.props.autorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n\r\n        }\r\n        this.props.setProfile(userId)\r\n        this.props.setUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {profile, updateStatus, status, savePhoto, saveProfile} = this.props\r\n\r\n        return (\r\n            <Profile profile={profile} savePhoto={savePhoto} updateStatus={updateStatus}\r\n                     status={status} isOwner={!this.props.match.params.userId}\r\n                     saveProfile={saveProfile}\r\n            />\r\n        )\r\n    };\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: selectProfile(state),\r\n        status: selectStatus(state),\r\n        autorizedUserId: selectUserId(state),\r\n        isAuth: selectIsAuth(state),\r\n        isOwner: selectOwner(state),\r\n\r\n    }\r\n}\r\n\r\n\r\n// const mapDispatchToProps: MapDispatchPropsType = {\r\n//     setProfile: setProfileTC,\r\n//     getStatus: getUserStatusTC,\r\n//     updateStatus: updateStatusTC,\r\n//     savePhoto: savePhoto,\r\n//     saveProfile: saveProfile,\r\n// }\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {setProfile, setUserStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n)(ProfileContainer)"],"names":["ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","newStatus","setNewStatus","useEffect","onHasStatus","className","s","title","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","placeholder","minLength","maxLength","Contacts","contacts","hasContacts","Object","values","some","contact","keys","filter","key","contactKey","undefined","map","Contact","contactValue","href","StatusJob","lookingForAJob","lookingForAJobDescription","hasStatusJob","onLookingForAJob","onStatusForAJob","AboutMe","aboutMe","hasAboutMe","FullName","fullName","MainAvatar","profile","isOwner","savePhoto","hasAvatar","photos","large","defaultAva","onChangeAvatar","type","target","files","length","alt","src","ProfileBlock","goToEditMode","onClick","Preloader","reduxForm","form","handleSubmit","error","onSubmit","createField","Input","required","Textarea","ProfileInfo","saveProfile","initialValues","formData","then","res","Post","props","message","counterLike","maxSymbols","maxLengthCreator","AddNewPostForm","React","reset","Field","name","component","validate","PostReduxForm","newPostTextBody","MyPosts","profilePost","addPost","postsElement","id","selectPost","state","profilePage","posts","selectProfile","selectStatus","selectOwner","mapDispatchToProps","addPostAC","MyPostsContainer","connect","Profile","ProfileContainer","userId","this","match","params","autorizedUserId","history","push","setProfile","setUserStatus","refreshProfile","prevProps","prevState","compose","selectUserId","isAuth","selectIsAuth","withRouter"],"sourceRoot":""}