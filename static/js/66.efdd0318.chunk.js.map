{"version":3,"file":"static/js/66.efdd0318.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/PostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","redux/selectors/profile.selectors.ts","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wallImg\":\"ProfileInfo_wallImg__yhUEG\",\"profileContainer\":\"ProfileInfo_profileContainer__bjKTK\",\"avatar\":\"ProfileInfo_avatar__kp82C\",\"name\":\"ProfileInfo_name__YaeQZ\",\"aboutMe\":\"ProfileInfo_aboutMe__QNVtQ\",\"contacts\":\"ProfileInfo_contacts__4b2Es\",\"statusJob\":\"ProfileInfo_statusJob__p+lod\",\"status\":\"ProfileInfo_status__AaJPa\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport {UsersProfilePropsType} from '../ProfileContainer';\r\n\r\nexport const ProfileStatusWithHooks: FC<UsersProfilePropsType> = ({status, updateStatus}) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [newStatus, setNewStatus] = useState(status)\r\n\r\n    useEffect(() => {\r\n        setNewStatus(status)\r\n    },[status])\r\n\r\n\r\n    const onActiveEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onDeactivateEditeMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(newStatus)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const onHasStatus = !status && 'No status' || status && `status: ${status}`\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={onActiveEditMode}> {onHasStatus} </span>\r\n\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={onDeactivateEditeMode}\r\n                           value={newStatus} placeholder={'change you status'} minLength={0} maxLength={30}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {UsersProfilePropsType} from '../ProfileContainer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport defaultAva from '../../../avatars/765-default-avatar.png'\r\nimport {ProfileStatusWithHooks} from 'components/Profile/ProfileInfo/ProfileStatusWithHooks';\r\n\r\nexport const ProfileInfo = (props: UsersProfilePropsType) => {\r\n    const {profile, getStatus, setProfile, updateStatus, status, isAuth, autorizedUserId} = props\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const hasContacts = Object.values(profile.contacts).some(contact => contact !== null && contact !== '')\r\n    const hasAboutMe = profile.aboutMe !== null ? `About me: ${profile.aboutMe}` : ''\r\n    const hasStatusJob = profile.lookingForAJobDescription !== null? `Status Job:${profile.lookingForAJobDescription}` : ''\r\n\r\n    return (\r\n        <div>\r\n            {/*<div className={s.wallImg}>*/}\r\n            {/*    <img src=\"https://i.pinimg.com/originals/b0/47/48/b047482b30fe60adac38bbfe05fbe7f2.jpg\"/>*/}\r\n            {/*</div>*/}\r\n\r\n            <div className={s.profileContainer}>\r\n                <img className={s.avatar}\r\n                     src={profile.photos.large !== null ? profile.photos.large : defaultAva}/>\r\n\r\n                <div className={s.name}>\r\n                    {profile.fullName}\r\n                    <div className={s.status}>\r\n                        <ProfileStatusWithHooks status={status} updateStatus={updateStatus}\r\n                                       setProfile={setProfile} profile={profile}\r\n                                       getStatus={getStatus} autorizedUserId={autorizedUserId}\r\n                                       isAuth={isAuth}\r\n                        />\r\n                    </div>\r\n                    <div className={s.aboutMe}>{hasAboutMe}</div>\r\n                </div>\r\n\r\n\r\n                {hasContacts && <div className={s.contacts}>\r\n                    <h3>My contacts: </h3>\r\n\r\n                    {profile.contacts.github && <a href={profile.contacts.github}>GitHub</a>}\r\n\r\n                    {profile.contacts.vk && <a href={profile.contacts.vk}>Vk</a>}\r\n\r\n                    {profile.contacts.instagram && <a href={profile.contacts.instagram}>instagram</a>}\r\n\r\n                    {profile.contacts.facebook && <a href={profile.contacts.facebook}>facebook</a>}\r\n\r\n                    {profile.contacts.twitter && <a href={profile.contacts.twitter}>twitter</a>}\r\n\r\n                    {profile.contacts.mainLink && <a href={profile.contacts.mainLink}>mainLink</a>}\r\n\r\n                    {profile.contacts.youtube && <a href={profile.contacts.youtube}>youtube</a>}\r\n\r\n                    {profile.contacts.website && <a href={profile.contacts.website}>website</a>}\r\n\r\n                </div>}\r\n            </div>\r\n\r\n            <span className={s.statusJob}>{hasStatusJob}</span>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__rzABo\",\"posts\":\"MyPosts_posts__QI74t\"};","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"Post_posts__YvArL\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\nimport {PostsProps} from 'redux/redux-store';\r\n\r\n\r\n\r\nexport const Post = (props: PostsProps) => {\r\n    return (\r\n        <div className={s.posts}>\r\n            <img src=\"https://i.pinimg.com/736x/1e/33/a5/1e33a5fad800ee8e782ad87e63169187.jpg\"/>\r\n            {props.message}\r\n            <div>\r\n                <span> like {props.counterLike}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {FormEvent} from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from 'utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControl/FormsControl';\r\n\r\nexport type PostFormType = {\r\n    newPostTextBody: string\r\n}\r\n\r\nconst maxSymbols = maxLengthCreator(41)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<PostFormType>> = React.memo((props) => {\r\n\r\n\r\n\r\n    const submit = (e: FormEvent<HTMLFormElement>) => {\r\n        props.handleSubmit(e)\r\n        props.reset()\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={submit}>\r\n            <div>\r\n                <Field\r\n                    name=\"newPostTextBody\"\r\n                    component={Textarea}\r\n                    minLength={0}\r\n                    maxLength={40}\r\n                    placeholder=\"Enter you text\"\r\n                    validate={[required, maxSymbols]\r\n                    }/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n})\r\nexport const PostReduxForm = reduxForm<PostFormType>({\r\n    form: 'addPostForm',\r\n    initialValues: {newPostTextBody: ''}\r\n\r\n\r\n})(AddNewPostForm)","import React, {FC} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from './Post/Post';\r\nimport {MyPostsType} from './MyPostsContainer';\r\nimport {PostFormType, PostReduxForm} from '../PostForm/AddNewPostForm';\r\n\r\n\r\nexport const MyPosts: FC<MyPostsType> = React.memo( ({profilePost, addPost}) => {\r\n\r\n\r\n    const postsElement = profilePost.map((e) => {\r\n        return (\r\n            <Post key={e.id} id={e.id} message={e.message} counterLike={e.counterLike}/>\r\n        )\r\n    })\r\n\r\n\r\n    const createPost = (values: PostFormType) => {\r\n        addPost(values.newPostTextBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>My posts</h3>\r\n            <PostReduxForm onSubmit={createPost}/>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n} )\r\n","import {AppStateType} from '../redux-store';\r\n\r\nexport const selectPost = (state: AppStateType) => state.profilePage.posts\r\nexport const selectProfile = (state: AppStateType) => state.profilePage.profile\r\nexport const selectStatus = (state: AppStateType) => state.profilePage.status\r\n","import React from 'react';\r\nimport {AppStateType, PostsProps, ProfilePageType, RootActionsType, UserProfileType} from 'redux/redux-store';\r\nimport {addPostAC} from 'redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {selectPost, selectProfile, selectStatus} from 'redux/selectors/profile.selectors';\r\n\r\nexport type MyPostsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profilePost: PostsProps[]\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (postFormBody: string) => void\r\n}\r\n\r\n// ---------------------------------------------------------------------------------------\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePost: selectPost(state)\r\n    }\r\n}\r\nlet mapDispatchToProps: MapDispatchToPropsType = {\r\n    addPost: addPostAC,\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {UsersProfilePropsType} from './ProfileContainer';\r\n\r\n\r\nexport const Profile = (props: UsersProfilePropsType) => {\r\n    const {profile, setProfile, getStatus, updateStatus, status, isAuth, autorizedUserId} = props\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} getStatus={getStatus}\r\n                         setProfile={setProfile} updateStatus={updateStatus}\r\n                         status={status} isAuth={isAuth} autorizedUserId={autorizedUserId}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {AppStateType, UserProfileType} from 'redux/redux-store';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {getUserStatusTC, setProfileTC, updateStatusTC} from 'redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {selectProfile, selectStatus} from 'redux/selectors/profile.selectors';\r\nimport {selectIsAuth, selectUserId} from 'redux/selectors/auth.selectors';\r\n\r\n\r\nexport type UsersProfilePropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profile: UserProfileType | null\r\n    status: string\r\n    autorizedUserId: string | null\r\n    isAuth: boolean\r\n}\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    setProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamType> & UsersProfilePropsType\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component <PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId && this.props.autorizedUserId) {\r\n            userId = this.props.autorizedUserId;\r\n            if (!userId ) {\r\n                this.props.history.push('/login')\r\n            }\r\n\r\n        }\r\n        this.props.setProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            profile,\r\n            setProfile,\r\n            getStatus,\r\n            updateStatus,\r\n            status,\r\n            autorizedUserId,\r\n            isAuth\r\n        } = this.props\r\n\r\n        return (\r\n            <Profile profile={profile} setProfile={setProfile}\r\n                     getStatus={getStatus} updateStatus={updateStatus}\r\n                     status={status} autorizedUserId={autorizedUserId}\r\n                     isAuth={isAuth}\r\n            />\r\n        )\r\n    };\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: selectProfile(state),\r\n        status: selectStatus(state),\r\n        autorizedUserId: selectUserId(state),\r\n        isAuth: selectIsAuth(state),\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps: MapDispatchPropsType = {\r\n    setProfile: setProfileTC,\r\n    getStatus: getUserStatusTC,\r\n    updateStatus: updateStatusTC,\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter,\r\n)(ProfileContainer)"],"names":["ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","newStatus","setNewStatus","useEffect","onHasStatus","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","placeholder","minLength","maxLength","ProfileInfo","props","profile","getStatus","setProfile","isAuth","autorizedUserId","Preloader","hasContacts","Object","values","contacts","some","contact","hasAboutMe","aboutMe","hasStatusJob","lookingForAJobDescription","className","s","src","photos","large","defaultAva","fullName","github","href","vk","instagram","facebook","twitter","mainLink","youtube","website","Post","message","counterLike","maxSymbols","maxLengthCreator","AddNewPostForm","React","onSubmit","handleSubmit","reset","Field","name","component","Textarea","validate","required","PostReduxForm","reduxForm","form","initialValues","newPostTextBody","MyPosts","profilePost","addPost","postsElement","map","id","selectPost","state","profilePage","posts","selectProfile","selectStatus","mapDispatchToProps","addPostAC","MyPostsContainer","connect","Profile","ProfileContainer","userId","this","match","params","history","push","setProfileTC","getUserStatusTC","updateStatusTC","compose","selectUserId","selectIsAuth","withRouter"],"sourceRoot":""}