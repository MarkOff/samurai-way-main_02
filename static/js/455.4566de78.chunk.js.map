{"version":3,"file":"static/js/455.4566de78.chunk.js","mappings":"0KACA,G,QAA0B,0BAA1B,EAAiE,6BAAjE,EAAqG,sBAArG,EAAuK,0B,mBCK1JA,EAAa,SAACC,GACvB,IAAIC,EAAI,kBAAcD,EAAME,IAE5B,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKC,IAAKL,EAAMM,IAAKC,IAAI,SACzB,SAAC,KAAD,CAASC,GAAIP,EAAME,UAAWC,EAA9B,SAAuCJ,EAAMS,WCP5CC,EAAU,SAACV,GACpB,OACI,gBAAKG,UAAWC,EAAhB,SACKJ,EAAMW,W,uCCCbC,GAAeC,EAAAA,EAAAA,GAAiB,IAsBzBC,GAAmBC,EAAAA,EAAAA,GAAuB,CAACC,KAAM,kBAA9BD,EAlB8B,SAACf,GAM3D,OACI,kBAAMiB,SANK,SAACC,GACZlB,EAAMmB,aAAaD,GACnBlB,EAAMoB,SAIN,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUd,KAAK,iBAC1Be,YAAY,qBAAqBC,SAAU,CAACC,EAAAA,EAAUd,QAEjE,gCAAM,6CAAN,a,6BCvBCe,EAAgB,SAACC,GAAD,OAAyBA,EAAMC,aAAaC,UAC5DC,EAAgB,SAACH,GAAD,OAAyBA,EAAMC,aAAaG,SC4BrEC,EAA2C,CACvCC,YAAaC,EAAAA,GAIrB,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAbkB,SAACT,GACnB,MAAO,CACHE,SAAUH,EAAcC,GACxBI,QAASD,EAAcH,MAUFK,GACzBK,EAAAA,EAFJ,EC5B6C,SAAC,GAAoC,IAAnCN,EAAkC,EAAlCA,QAAQF,EAA0B,EAA1BA,SAASI,EAAiB,EAAjBA,YAKtDK,EAAkBP,EAAQQ,KAAI,SAACtB,GACjC,OACI,SAACnB,EAAD,CAAuBO,IAAKY,EAAEZ,IAAKJ,GAAIgB,EAAEhB,GAAIO,KAAMS,EAAET,MAApCS,EAAEhB,OAIrBuC,EAAkBX,EAASU,KAAI,SAACtB,GAClC,OACI,SAACR,EAAD,CAAoBR,GAAIgB,EAAEhB,GAAIS,QAASO,EAAEP,SAA3BO,EAAEhB,OASxB,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKmC,KAEL,iBAAKpC,UAAWC,EAAhB,WACI,yBAAMqC,KACN,SAAC3B,EAAD,CAAkBG,SAXX,SAACyB,GAChBR,EAAYQ,EAAOC,6B,0ICJrBC,EAAkB,SAAChB,GACrB,MAAO,CACHiB,QAAQC,EAAAA,EAAAA,IAAalB,KAKtB,SAASU,EAAoBS,GAYhC,OAAOV,EAAAA,EAAAA,IAAQO,EAARP,EAVmB,SAACrC,GAEvB,IAAK6C,EAAwB7C,EAAxB6C,OAAWG,GAAhB,OAA6BhD,EAA7B,GAEA,OAAK6C,GAGE,SAACE,GAAD,UAAgBC,KAFZ,SAAC,KAAD,CAAUxC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogForm/MessageForm.tsx","redux/selectors/message.selectors.ts","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","hok/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__n1CZG\",\"dialogsItem\":\"Dialogs_dialogsItem__1TB8B\",\"text\":\"Dialogs_text__LvDMd\",\"active\":\"Dialogs_active__irX6n\",\"messages\":\"Dialogs_messages__dCAg4\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {DialogsType} from 'redux/redux-store';\r\n\r\n\r\nexport const DialogItem = (props: DialogsType) => {\r\n    let path = `/dialog/${props.id}`\r\n\r\n    return (\r\n        <div className={s.dialogsItem}>\r\n            <img src={props.ava} alt=\"ava\"/>\r\n            <NavLink to={path} className={s.text}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {MessagesType} from 'redux/redux-store';\r\n\r\n\r\nexport const Message = (props: MessagesType) => {\r\n    return (\r\n        <div className={s.messages}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {FormEvent} from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from 'utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControl/FormsControl';\r\n\r\nexport type MessageForm = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst max50symbols = maxLengthCreator(50)\r\n\r\n\r\n\r\nconst MessageForm: React.FC<InjectedFormProps<MessageForm>> = (props) => {\r\n    const submit = (e:FormEvent<HTMLFormElement>) =>{\r\n        props.handleSubmit(e)\r\n        props.reset()\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newMessageBody\"\r\n                       placeholder=\"Enter your message\" validate={[required, max50symbols]}/>\r\n            </div>\r\n            <div> <button>send message</button> </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport const MessageReduxForm = reduxForm<MessageForm>({form: 'addMessageForm'})(MessageForm)","import {AppStateType} from '../redux-store';\r\n\r\nexport const selectMessage = (state: AppStateType) => state.messagesPage.messages\r\nexport const selectDialogs = (state: AppStateType) => state.messagesPage.dialogs\r\n\r\n","import React from 'react';\r\nimport {AppStateType, DialogsType, MessagesPageType, MessagesType, RootActionsType} from 'redux/redux-store';\r\nimport {sendMessageAC} from 'redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {withAuthRedirect} from 'hok/withAuthRedirect';\r\nimport {selectDialogs, selectMessage} from 'redux/selectors/message.selectors';\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\ntype MapStatePropsType = {\r\n    messages: MessagesType[]\r\n    dialogs: DialogsType[]\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\n// ---------------------------------------------------------------------------------------\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        messages: selectMessage(state),\r\n        dialogs: selectDialogs(state),\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps: MapDispatchPropsType = {\r\n        sendMessage: sendMessageAC\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)","import React, {FC} from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {Message} from './Message/Message';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport {MessageForm, MessageReduxForm} from './DialogForm/MessageForm';\r\n\r\n\r\nexport const Dialogs: FC<DialogsPropsType> = ({dialogs,messages,sendMessage}) => {\r\n\r\n\r\n\r\n\r\n    const dialogsElements = dialogs.map((e) => {\r\n        return (\r\n            <DialogItem key={e.id} ava={e.ava} id={e.id} name={e.name}/>\r\n        )\r\n    })\r\n\r\n    const messageElements = messages.map((e) => {\r\n        return (\r\n            <Message key={e.id} id={e.id} message={e.message}/>\r\n        )\r\n    })\r\n\r\n\r\n    const addMessage = (values:MessageForm) => {\r\n        sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElements}</div>\r\n                <MessageReduxForm onSubmit={addMessage}/>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from 'redux/redux-store';\r\nimport {selectIsAuth} from 'redux/selectors/auth.selectors';\r\n\r\n// export const withAuthRedirect = (Component: any) => {\r\n// class RedirectComponent extends React.Component {\r\n//     render() {\r\n//         if (!this.props.isAuth)\r\n//             return <Redirect to={'/login'}/>\r\n//             return <Component {...this.props}/>\r\n//\r\n//     }\r\n// }\r\n//\r\n// };\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: selectIsAuth(state)\r\n    }\r\n}\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n        return <Component  {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n};"],"names":["DialogItem","props","path","id","className","s","src","ava","alt","to","name","Message","message","max50symbols","maxLengthCreator","MessageReduxForm","reduxForm","form","onSubmit","e","handleSubmit","reset","Field","component","Textarea","placeholder","validate","required","selectMessage","state","messagesPage","messages","selectDialogs","dialogs","mapDispatchToProps","sendMessage","sendMessageAC","compose","connect","withAuthRedirect","dialogsElements","map","messageElements","values","newMessageBody","mapStateToProps","isAuth","selectIsAuth","Component","restProps"],"sourceRoot":""}