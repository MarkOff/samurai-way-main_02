{"version":3,"file":"static/js/455.57137aad.chunk.js","mappings":"0KACA,G,QAA0B,0BAA1B,EAAiE,6BAAjE,EAAqG,sBAArG,EAAuK,0B,mBCO1JA,EAA6B,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,KAAMC,EAAS,EAATA,IAC9CC,EAAI,kBAAcH,GAEtB,OACI,gBAAKI,UAAWC,EAAhB,UACI,UAAC,KAAD,CAASC,GAAIH,EAAMC,UAAWC,EAA9B,WACI,gBAAKE,IAAKL,EAAKM,IAAI,QAClBP,QCRJQ,EAA2B,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,QAAQV,EAAQ,EAARA,GAC9C,OACI,gBAAKI,UAAWC,EAAYL,GAAIA,EAAhC,SACKU,K,uCCDPC,GAAeC,EAAAA,EAAAA,GAAiB,IAsBzBC,GAAmBC,EAAAA,EAAAA,GAAuB,CAACC,KAAM,kBAA9BD,EAlB8B,SAACE,GAM3D,OACI,kBAAMC,SANK,SAACC,GACZF,EAAMG,aAAaD,GACnBF,EAAMI,SAIN,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUtB,KAAK,iBAC1BuB,YAAY,qBAAqBC,SAAU,CAACC,EAAAA,EAAUf,QAEjE,gCAAM,6CAAN,a,6BCrBCgB,EAAgB,SAACC,GAAD,OAAyBA,EAAMC,cCqB5D,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KARkB,SAACH,GACnB,MAAO,CACHI,YAAaL,EAAcC,MAMuD,CAACK,YAAAA,EAAAA,IACvFC,EAAAA,EAFJ,ECjB6C,SAAC,GAAgC,IAA/BF,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YAGlDE,EAAkBH,EAAYI,QAAQC,KAAI,SAACnB,GAC7C,OACI,SAACnB,EAAD,CAAuBG,IAAKgB,EAAEhB,IAAKF,GAAIkB,EAAElB,GAAIC,KAAMiB,EAAEjB,MAApCiB,EAAElB,OAIrBsC,EAAkBN,EAAYO,SAASF,KAAI,SAACnB,GAC9C,OACI,SAACT,EAAD,CAAoBT,GAAIkB,EAAElB,GAAIU,QAASQ,EAAER,SAA3BQ,EAAElB,OASxB,OACI,iBAAKI,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK8B,KAEL,iBAAK/B,UAAWC,EAAhB,WACI,yBAAMiC,KACN,SAACzB,EAAD,CAAkBI,SAXX,SAACuB,GAChBP,EAAYO,EAAOC,6B,0IChBrBC,EAAkB,SAACd,GACrB,MAAO,CACHe,QAAQC,EAAAA,EAAAA,IAAahB,KAKtB,SAASM,EAAoBW,GAYhC,OAAOd,EAAAA,EAAAA,IAAuDW,EAAvDX,EAVmB,SAACf,GAEvB,IAAK2B,EAAwB3B,EAAxB2B,OAAWG,GAAhB,OAA6B9B,EAA7B,GAEA,OAAK2B,GAGE,SAACE,GAAD,UAAgBC,KAFZ,SAAC,KAAD,CAAUxC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogForm/MessageForm.tsx","redux/selectors/message.selectors.ts","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","hok/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__n1CZG\",\"dialogsItem\":\"Dialogs_dialogsItem__1TB8B\",\"text\":\"Dialogs_text__LvDMd\",\"active\":\"Dialogs_active__irX6n\",\"messages\":\"Dialogs_messages__dCAg4\"};","import React, {FC} from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {DialogType} from '../../../types/commonTypes';\r\n\r\n\r\n\r\n\r\nexport const DialogItem: FC<DialogType> = ({id, name, ava}) => {\r\n    let path = `/dialog/${id}`\r\n\r\n    return (\r\n        <div className={s.dialogsItem}>\r\n            <NavLink to={path} className={s.text}>\r\n                <img src={ava} alt=\"ava\"/>\r\n                {name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React, {FC} from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {MessageType} from '../../../types/commonTypes';\r\n\r\n\r\n\r\n\r\nexport const Message: FC<MessageType> = ({message,id}) => {\r\n    return (\r\n        <div className={s.messages} id={id}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {FormEvent} from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from 'utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControl/FormsControl';\r\n\r\nexport type MessageForm = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst max50symbols = maxLengthCreator(50)\r\n\r\n\r\n\r\nconst MessageForm: React.FC<InjectedFormProps<MessageForm>> = (props) => {\r\n    const submit = (e:FormEvent<HTMLFormElement>) =>{\r\n        props.handleSubmit(e)\r\n        props.reset()\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newMessageBody\"\r\n                       placeholder=\"Enter your message\" validate={[required, max50symbols]}/>\r\n            </div>\r\n            <div> <button>send message</button> </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport const MessageReduxForm = reduxForm<MessageForm>({form: 'addMessageForm'})(MessageForm)","import {AppStateType} from '../redux-store';\r\n\r\nexport const selectMessage = (state: AppStateType) => state.messagesPage.messages\r\nexport const selectDialog = (state: AppStateType) => state.messagesPage.dialogs\r\nexport const selectDialogs = (state: AppStateType) => state.messagesPage\r\n\r\n","import React from 'react';\r\nimport {AppStateType} from 'redux/redux-store';\r\nimport {sendMessage} from 'redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from 'hok/withAuthRedirect';\r\nimport {selectDialogs} from 'redux/selectors/message.selectors';\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        mainDialogs: selectDialogs(state)\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchPropsType, void, AppStateType>(mapStateToProps, {sendMessage}),\r\n    withAuthRedirect\r\n)(Dialogs)","import React, {FC} from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {Message} from './Message/Message';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport {MessageForm, MessageReduxForm} from './DialogForm/MessageForm';\r\n\r\n\r\nexport const Dialogs: FC<DialogsPropsType> = ({mainDialogs, sendMessage}) => {\r\n\r\n\r\n    const dialogsElements = mainDialogs.dialogs.map((e) => {\r\n        return (\r\n            <DialogItem key={e.id} ava={e.ava} id={e.id} name={e.name}/>\r\n        )\r\n    })\r\n\r\n    const messageElements = mainDialogs.messages.map((e) => {\r\n        return (\r\n            <Message key={e.id} id={e.id} message={e.message}/>\r\n        )\r\n    })\r\n\r\n\r\n    const addMessage = (values: MessageForm) => {\r\n        sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElements}</div>\r\n                <MessageReduxForm onSubmit={addMessage}/>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from 'redux/redux-store';\r\nimport {selectIsAuth} from 'redux/selectors/auth.selectors';\r\n\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isAuth: selectIsAuth(state)\r\n    }\r\n}\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n        return <Component  {...restProps as T}/>\r\n    }\r\n\r\n    return connect<MapStateToPropsType, void, void, AppStateType>(mapStateToProps)(RedirectComponent)\r\n};"],"names":["DialogItem","id","name","ava","path","className","s","to","src","alt","Message","message","max50symbols","maxLengthCreator","MessageReduxForm","reduxForm","form","props","onSubmit","e","handleSubmit","reset","Field","component","Textarea","placeholder","validate","required","selectDialogs","state","messagesPage","compose","connect","mainDialogs","sendMessage","withAuthRedirect","dialogsElements","dialogs","map","messageElements","messages","values","newMessageBody","mapStateToProps","isAuth","selectIsAuth","Component","restProps"],"sourceRoot":""}